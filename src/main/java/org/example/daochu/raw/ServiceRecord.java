package org.example.daochu.raw;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.fisco.bcos.sdk.abi.FunctionReturnDecoder;
import org.fisco.bcos.sdk.abi.TypeReference;
import org.fisco.bcos.sdk.abi.datatypes.DynamicArray;
import org.fisco.bcos.sdk.abi.datatypes.Event;
import org.fisco.bcos.sdk.abi.datatypes.Function;
import org.fisco.bcos.sdk.abi.datatypes.Type;
import org.fisco.bcos.sdk.abi.datatypes.Utf8String;
import org.fisco.bcos.sdk.abi.datatypes.generated.Int256;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple1;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple6;
import org.fisco.bcos.sdk.client.Client;
import org.fisco.bcos.sdk.contract.Contract;
import org.fisco.bcos.sdk.crypto.CryptoSuite;
import org.fisco.bcos.sdk.crypto.keypair.CryptoKeyPair;
import org.fisco.bcos.sdk.eventsub.EventCallback;
import org.fisco.bcos.sdk.model.CryptoType;
import org.fisco.bcos.sdk.model.TransactionReceipt;
import org.fisco.bcos.sdk.model.callback.TransactionCallback;
import org.fisco.bcos.sdk.transaction.model.exception.ContractException;

@SuppressWarnings("unchecked")
public class ServiceRecord extends Contract {
    public static final String[] BINARY_ARRAY = {"","01906117b2565b836020015183815181101515610b9c57fe5b906020019060200201819052508073ffffffffffffffffffffffffffffffffffffffff16639c981fcb6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610bfc90611d70565b600060405180830381600087803b158015610c1657600080fd5b505af1158015610c2a573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250610c5391908101906117b2565b836040015183815181101515610c6557fe5b906020019060200201819052508073ffffffffffffffffffffffffffffffffffffffff16639c981fcb6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610cc590611f12565b600060405180830381600087803b158015610cdf57600080fd5b505af1158015610cf3573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250610d1c91908101906117b2565b836060015183815181101515610d2e57fe5b906020019060200201819052508073ffffffffffffffffffffffffffffffffffffffff16639c981fcb6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610d8e90611e68565b600060405180830381600087803b158015610da857600080fd5b505af1158015610dbc573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250610de591908101906117b2565b836080015183815181101515610df757fe5b906020019060200201819052508073ffffffffffffffffffffffffffffffffffffffff1663fda69fae6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610e5790611dc5565b602060405180830381600087803b158015610e7157600080fd5b505af1158015610e85573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610ea99190810190611748565b8360a0015183815181101515610ebb57fe5b90602001906020020181815250508160010191506108cb565b826000015183602001518460400151856060015186608001518760a001518595508494508393508292508191508090509b509b509b509b509b509b5050505050505091939550919395565b600080600080600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f23f63c960006040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610f9d9190611d4e565b602060405180830381600087803b158015610fb757600080fd5b505af1158015610fcb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610fef919081019061171f565b92508273ffffffffffffffffffffffffffffffffffffffff166313db93466040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561105557600080fd5b505af1158015611069573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061108d91908101906116f6565b91508173ffffffffffffffffffffffffffffffffffffffff1663e942b5168b6040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016110e49190611e33565b600060405180830381600087803b1580156110fe57600080fd5b505af1158015611112573d6000803e3d6000fd5b505050508173ffffffffffffffffffffffffffffffffffffffff1663e942b5168a6040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161116b9190611edd565b600060405180830381600087803b15801561118557600080fd5b505af1158015611199573d6000803e3d6000fd5b505050508173ffffffffffffffffffffffffffffffffffffffff1663e942b516896040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016111f29190611d90565b600060405180830381600087803b15801561120c57600080fd5b505af1158015611220573d6000803e3d6000fd5b505050508173ffffffffffffffffffffffffffffffffffffffff1663e942b516886040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016112799190611f32565b600060405180830381600087803b15801561129357600080fd5b505af11580156112a7573d6000803e3d6000fd5b505050508173ffffffffffffffffffffffffffffffffffffffff1663e942b516876040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016113009190611e88565b600060405180830381600087803b15801561131a57600080fd5b505af115801561132e573d6000803e3d6000fd5b505050508173ffffffffffffffffffffffffffffffffffffffff16632ef8ba74866040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016113879190611de5565b600060405180830381600087803b1580156113a157600080fd5b505af11580156113b5573d6000803e3d6000fd5b505050508273ffffffffffffffffffffffffffffffffffffffff166331afac368b846040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401611410929190611d1e565b602060405180830381600087803b15801561142a57600080fd5b505af115801561143e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506114629190810190611748565b90507fc57b01fa77f41df77eaab79a0e2623fab2e7ae3e9530d9b1cab225ad65f2b7ce816040516114939190611cb1565b60405180910390a18093505050509695505050505050565b60008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156115415780601f1061151657610100808354040283529160200191611541565b820191906000526020600020905b81548152906001019060200180831161152457829003601f168201915b505050505081565b60c0604051908101604052806060815260200160608152602001606081526020016060815260200160608152602001606081525090565b600061158c825161205c565b905092915050565b60006115a0825161206e565b905092915050565b60006115b48251612080565b905092915050565b60006115c88251612092565b905092915050565b60006115dc82356120a4565b905092915050565b60006115f082516120a4565b905092915050565b600082601f830112151561160b57600080fd5b813561161e61161982611f94565b611f67565b9150808252602083016020830185838301111561163a57600080fd5b6116458382846120d2565b50505092915050565b600082601f830112151561166157600080fd5b815161167461166f82611f94565b611f67565b9150808252602083016020830185838301111561169057600080fd5b61169b8382846120e1565b50505092915050565b6000602082840312156116b657600080fd5b60006116c484828501611580565b91505092915050565b6000602082840312156116df57600080fd5b60006116ed84828501611594565b91505092915050565b60006020828403121561170857600080fd5b6000611716848285016115a8565b91505092915050565b60006020828403121561173157600080fd5b600061173f848285016115bc565b91505092915050565b60006020828403121561175a57600080fd5b6000611768848285016115e4565b91505092915050565b60006020828403121561178357600080fd5b600082013567ffffffffffffffff81111561179d57600080fd5b6117a9848285016115f8565b91505092915050565b6000602082840312156117c457600080fd5b600082015167ffffffffffffffff8111156117de57600080fd5b6117ea8482850161164e565b91505092915050565b60008060008060008060c0878903121561180c57600080fd5b600087013567ffffffffffffffff81111561182657600080fd5b61183289828a016115f8565b965050602087013567ffffffffffffffff81111561184f57600080fd5b61185b89828a016115f8565b955050604087013567ffffffffffffffff81111561187857600080fd5b61188489828a016115f8565b945050606087013567ffffffffffffffff8111156118a157600080fd5b6118ad89828a016115f8565b935050608087013567ffffffffffffffff8111156118ca57600080fd5b6118d689828a016115f8565b92505060a06118e789828a016115d0565b9150509295509295509295565b60006118ff82611fec565b80845260208401935061191183611fc0565b60005b82811015611943576119278683516119db565b61193082612018565b9150602086019550600181019050611914565b50849250505092915050565b600061195a82611ff7565b8084526020840193508360208202850161197385611fcd565b60005b848110156119ac57838303885261198e838351611a20565b925061199982612025565b9150602088019750600181019050611976565b508196508694505050505092915050565b6119c6816120ae565b82525050565b6119d5816120c0565b82525050565b6119e481612052565b82525050565b60006119f58261200d565b808452611a098160208601602086016120e1565b611a1281612114565b602085010191505092915050565b6000611a2b82612002565b808452611a3f8160208601602086016120e1565b611a4881612114565b602085010191505092915050565b600081546001811660008114611a735760018114611a9357611ad4565b607f600283041680865260ff198316602087015260408601935050611ad4565b60028204808652602086019550611aa985611fda565b60005b82811015611acb57815481890152600182019150602081019050611aac565b80880195505050505b505092915050565b6000600982527f737461727454696d6500000000000000000000000000000000000000000000006020830152604082019050919050565b6000600782527f73657276696365000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000600282527f69640000000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000","600682527f64657461696c00000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000600382527f68496400000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000600a82527f73657241646472657373000000000000000000000000000000000000000000006020830152604082019050919050565b600060c0820190508181036000830152611c40818961194f565b90508181036020830152611c54818861194f565b90508181036040830152611c68818761194f565b90508181036060830152611c7c818661194f565b90508181036080830152611c90818561194f565b905081810360a0830152611ca481846118f4565b9050979650505050505050565b6000602082019050611cc660008301846119db565b92915050565b60006020820190508181036000830152611ce68184611a20565b905092915050565b60006040820190508181036000830152611d0881856119ea565b9050611d1760208301846119bd565b9392505050565b60006040820190508181036000830152611d3881856119ea565b9050611d4760208301846119cc565b9392505050565b60006020820190508181036000830152611d688184611a56565b905092915050565b60006020820190508181036000830152611d8981611adc565b9050919050565b60006040820190508181036000830152611da981611adc565b90508181036020830152611dbd81846119ea565b905092915050565b60006020820190508181036000830152611dde81611b13565b9050919050565b60006040820190508181036000830152611dfe81611b13565b9050611e0d60208301846119db565b92915050565b60006020820190508181036000830152611e2c81611b4a565b9050919050565b60006040820190508181036000830152611e4c81611b4a565b90508181036020830152611e6081846119ea565b905092915050565b60006020820190508181036000830152611e8181611b81565b9050919050565b60006040820190508181036000830152611ea181611b81565b90508181036020830152611eb581846119ea565b905092915050565b60006020820190508181036000830152611ed681611bb8565b9050919050565b60006040820190508181036000830152611ef681611bb8565b90508181036020830152611f0a81846119ea565b905092915050565b60006020820190508181036000830152611f2b81611bef565b9050919050565b60006040820190508181036000830152611f4b81611bef565b90508181036020830152611f5f81846119ea565b905092915050565b6000604051905081810181811067ffffffffffffffff82111715611f8a57600080fd5b8060405250919050565b600067ffffffffffffffff821115611fab57600080fd5b601f19601f8301169050602081019050919050565b6000602082019050919050565b6000602082019050919050565b60008160005260206000209050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600061206782612032565b9050919050565b600061207982612032565b9050919050565b600061208b82612032565b9050919050565b600061209d82612032565b9050919050565b6000819050919050565b60006120b982612032565b9050919050565b60006120cb82612032565b9050919050565b82818337600083830152505050565b60005b838110156120ff5780820151818401526020810190506120e4565b8381111561210e576000848401525b50505050565b6000601f19601f83011690509190505600a265627a7a723058209b161cd4aa26d848cd0e183f82837b91d2411ea8e6168931f84e792249a5996f6c6578706572696d656e74616cf50037"};

    public static final String BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", BINARY_ARRAY);

    public static final String[] SM_BINARY_ARRAY = {};

    public static final String SM_BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", SM_BINARY_ARRAY);

    public static final String[] ABI_ARRAY = {"[{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"string\"}],\"name\":\"selectById\",\"outputs\":[{\"name\":\"\",\"type\":\"string[]\"},{\"name\":\"\",\"type\":\"string[]\"},{\"name\":\"\",\"type\":\"string[]\"},{\"name\":\"\",\"type\":\"string[]\"},{\"name\":\"\",\"type\":\"string[]\"},{\"name\":\"\",\"type\":\"int256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"string\"},{\"name\":\"_hId\",\"type\":\"string\"},{\"name\":\"_startTime\",\"type\":\"string\"},{\"name\":\"_serAddress\",\"type\":\"string\"},{\"name\":\"_detail\",\"type\":\"string\"},{\"name\":\"_service\",\"type\":\"int256\"}],\"name\":\"applyService\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"table_name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"count\",\"type\":\"int256\"}],\"name\":\"CreateResult\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"count\",\"type\":\"int256\"}],\"name\":\"InsertResult\",\"type\":\"event\"}]"};

    public static final String ABI = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", ABI_ARRAY);

    public static final String FUNC_SELECTBYID = "selectById";

    public static final String FUNC_APPLYSERVICE = "applyService";

    public static final String FUNC_TABLE_NAME = "table_name";

    public static final Event CREATERESULT_EVENT = new Event("CreateResult", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
    ;

    public static final Event INSERTRESULT_EVENT = new Event("InsertResult", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
    ;

    protected ServiceRecord(String contractAddress, Client client, CryptoKeyPair credential) {
        super(getBinary(client.getCryptoSuite()), contractAddress, client, credential);
    }

    public static String getBinary(CryptoSuite cryptoSuite) {
        return (cryptoSuite.getCryptoTypeConfig() == CryptoType.ECDSA_TYPE ? BINARY : SM_BINARY);
    }

    public Tuple6<List<String>, List<String>, List<String>, List<String>, List<String>, List<BigInteger>> selectById(String _id) throws ContractException {
        final Function function = new Function(FUNC_SELECTBYID, 
                Arrays.<Type>asList(new Utf8String(_id)),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Utf8String>>() {}, new TypeReference<DynamicArray<Utf8String>>() {}, new TypeReference<DynamicArray<Utf8String>>() {}, new TypeReference<DynamicArray<Utf8String>>() {}, new TypeReference<DynamicArray<Utf8String>>() {}, new TypeReference<DynamicArray<Int256>>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple6<List<String>, List<String>, List<String>, List<String>, List<String>, List<BigInteger>>(
                convertToNative((List<Utf8String>) results.get(0).getValue()), 
                convertToNative((List<Utf8String>) results.get(1).getValue()), 
                convertToNative((List<Utf8String>) results.get(2).getValue()), 
                convertToNative((List<Utf8String>) results.get(3).getValue()), 
                convertToNative((List<Utf8String>) results.get(4).getValue()), 
                convertToNative((List<Int256>) results.get(5).getValue()));
    }

    public TransactionReceipt applyService(String _id, String _hId, String _startTime, String _serAddress, String _detail, BigInteger _service) {
        final Function function = new Function(
                FUNC_APPLYSERVICE, 
                Arrays.<Type>asList(new Utf8String(_id),
                new Utf8String(_hId),
                new Utf8String(_startTime),
                new Utf8String(_serAddress),
                new Utf8String(_detail),
                new Int256(_service)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void applyService(String _id, String _hId, String _startTime, String _serAddress, String _detail, BigInteger _service, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_APPLYSERVICE, 
                Arrays.<Type>asList(new Utf8String(_id),
                new Utf8String(_hId),
                new Utf8String(_startTime),
                new Utf8String(_serAddress),
                new Utf8String(_detail),
                new Int256(_service)),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForApplyService(String _id, String _hId, String _startTime, String _serAddress, String _detail, BigInteger _service) {
        final Function function = new Function(
                FUNC_APPLYSERVICE, 
                Arrays.<Type>asList(new Utf8String(_id),
                new Utf8String(_hId),
                new Utf8String(_startTime),
                new Utf8String(_serAddress),
                new Utf8String(_detail),
                new Int256(_service)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple6<String, String, String, String, String, BigInteger> getApplyServiceInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_APPLYSERVICE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Int256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple6<String, String, String, String, String, BigInteger>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (String) results.get(2).getValue(), 
                (String) results.get(3).getValue(), 
                (String) results.get(4).getValue(), 
                (BigInteger) results.get(5).getValue()
                );
    }

    public Tuple1<BigInteger> getApplyServiceOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_APPLYSERVICE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public String table_name() throws ContractException {
        final Function function = new Function(FUNC_TABLE_NAME, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public List<CreateResultEventResponse> getCreateResultEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(CREATERESULT_EVENT, transactionReceipt);
        ArrayList<CreateResultEventResponse> responses = new ArrayList<CreateResultEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            CreateResultEventResponse typedResponse = new CreateResultEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.count = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeCreateResultEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(CREATERESULT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeCreateResultEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(CREATERESULT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<InsertResultEventResponse> getInsertResultEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(INSERTRESULT_EVENT, transactionReceipt);
        ArrayList<InsertResultEventResponse> responses = new ArrayList<InsertResultEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            InsertResultEventResponse typedResponse = new InsertResultEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.count = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeInsertResultEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(INSERTRESULT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeInsertResultEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(INSERTRESULT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public static ServiceRecord load(String contractAddress, Client client, CryptoKeyPair credential) {
        return new ServiceRecord(contractAddress, client, credential);
    }

    public static ServiceRecord deploy(Client client, CryptoKeyPair credential) throws ContractException {
        return deploy(ServiceRecord.class, client, credential, getBinary(client.getCryptoSuite()), "");
    }

    public static class CreateResultEventResponse {
        public TransactionReceipt.Logs log;

        public BigInteger count;
    }

    public static class InsertResultEventResponse {
        public TransactionReceipt.Logs log;

        public BigInteger count;
    }
}
