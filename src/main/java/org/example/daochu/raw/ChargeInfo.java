package org.example.daochu.raw;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.fisco.bcos.sdk.abi.FunctionReturnDecoder;
import org.fisco.bcos.sdk.abi.TypeReference;
import org.fisco.bcos.sdk.abi.datatypes.DynamicArray;
import org.fisco.bcos.sdk.abi.datatypes.Event;
import org.fisco.bcos.sdk.abi.datatypes.Function;
import org.fisco.bcos.sdk.abi.datatypes.Type;
import org.fisco.bcos.sdk.abi.datatypes.Utf8String;
import org.fisco.bcos.sdk.abi.datatypes.generated.Int256;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple1;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple3;
import org.fisco.bcos.sdk.client.Client;
import org.fisco.bcos.sdk.contract.Contract;
import org.fisco.bcos.sdk.crypto.CryptoSuite;
import org.fisco.bcos.sdk.crypto.keypair.CryptoKeyPair;
import org.fisco.bcos.sdk.eventsub.EventCallback;
import org.fisco.bcos.sdk.model.CryptoType;
import org.fisco.bcos.sdk.model.TransactionReceipt;
import org.fisco.bcos.sdk.model.callback.TransactionCallback;
import org.fisco.bcos.sdk.transaction.model.exception.ContractException;

@SuppressWarnings("unchecked")
public class ChargeInfo extends Contract {
    public static final String[] BINARY_ARRAY = {"6080604052611001600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503480156200005457600080fd5b5060006040805190810160405280600f81526020017f436861726765496e666f5461626c65000000000000000000000000000000000081525060009080519060200190620000a4929190620001b7565b50600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166356004b6a60006040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016200011f9190620003d2565b602060405180830381600087803b1580156200013a57600080fd5b505af11580156200014f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506200017591908101906200027c565b90507fb5636cd912a73dcdb5b570dbe331dfa3e6435c93e029e642def2c8e40dacf21081604051620001a89190620003b5565b60405180910390a15062000446565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620001fa57805160ff19168380011785556200022b565b828001600101855582156200022b579182015b828111156200022a5782518255916020019190600101906200020d565b5b5090506200023a91906200023e565b5090565b6200026391905b808211156200025f57600081600090555060010162000245565b5090565b90565b60006200027482516200043c565b905092915050565b6000602082840312156200028f57600080fd5b60006200029f8482850162000266565b91505092915050565b620002b38162000432565b82525050565b600081546001811660008114620002d95760018114620002fa576200033f565b607f600283041680865260ff1983166020870152604086019350506200033f565b60028204808652602086019550620003128562000420565b60005b82811015620003365781548189015260018201915060208101905062000315565b80880195505050505b505092915050565b6000601782527f6368617267654e616d652c2063686172676550686f6e650000000000000000006020830152604082019050919050565b6000600282527f69640000000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000602082019050620003cc6000830184620002a8565b92915050565b60006060820190508181036000830152620003ee8184620002b9565b9050818103602083015262000403816200037e565b90508181036040830152620004188162000347565b905092915050565b60008160005260206000209050919050565b6000819050919050565b6000819050919050565b6117d780620004566000396000f300608060405260043610610057576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806326b477fd1461005c5780632fe99bdc1461009b578063db015ff5146100d8575b600080fd5b34801561006857600080fd5b50610083600480360361007e91908101906110af565b610103565b604051610092939291906113fa565b60405180910390f35b3480156100a757600080fd5b506100c260048036036100bd9190810190611131565b610a1e565b6040516100cf9190611446565b60405180910390f35b3480156100e457600080fd5b506100ed610e12565b6040516100fa9190611461565b60405180910390f35b60608060606000806000610115610eb0565b600080600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f23f63c960006040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161019091906114e3565b602060405180830381600087803b1580156101aa57600080fd5b505af11580156101be573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506101e2919081019061105d565b95508573ffffffffffffffffffffffffffffffffffffffff16637857d7c96040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561024857600080fd5b505af115801561025c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506102809190810190610fe2565b94508473ffffffffffffffffffffffffffffffffffffffff1663cd30a1d18b6040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016102d791906115cf565b600060405180830381600087803b1580156102f157600080fd5b505af1158015610305573d6000803e3d6000fd5b505050508573ffffffffffffffffffffffffffffffffffffffff1663e8434e398b876040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610360929190611483565b602060405180830381600087803b15801561037a57600080fd5b505af115801561038e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506103b2919081019061100b565b93508373ffffffffffffffffffffffffffffffffffffffff1663949d225d6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561041857600080fd5b505af115801561042c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506104509190810190611086565b60405190808252806020026020018201604052801561048357816020015b606081526020019060019003908161046e5790505b5083600001819052508373ffffffffffffffffffffffffffffffffffffffff1663949d225d6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156104f057600080fd5b505af1158015610504573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506105289190810190611086565b60405190808252806020026020018201604052801561055b57816020015b60608152602001906001900390816105465790505b5083602001819052508373ffffffffffffffffffffffffffffffffffffffff1663949d225d6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156105c857600080fd5b505af11580156105dc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506106009190810190611086565b60405190808252806020026020018201604052801561063357816020015b606081526020019060019003908161061e5790505b508360400181905250600091505b8373ffffffffffffffffffffffffffffffffffffffff1663949d225d6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156106a557600080fd5b505af11580156106b9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506106dd9190810190611086565b8212156109f3578373ffffffffffffffffffffffffffffffffffffffff1663846719e0836040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016107399190611446565b602060405180830381600087803b15801561075357600080fd5b505af1158015610767573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061078b9190810190611034565b90508073ffffffffffffffffffffffffffffffffffffffff16639c981fcb6040518163ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016107e0906115af565b600060405180830381600087803b1580156107fa57600080fd5b505af115801561080e573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525061083791908101906110f0565b83600001518381518110151561084957fe5b906020019060200201819052508073ffffffffffffffffffffffffffffffffffffffff16639c981fcb6040518163ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016108a99061155a565b600060405180830381600087803b1580156108c357600080fd5b505af11580156108d7573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525061090091908101906110f0565b83602001518381518110151561091257fe5b906020019060200201819052508073ffffffffffffffffffffffffffffffffffffffff16639c981fcb6040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161097290611505565b600060405180830381600087803b15801561098c57600080fd5b505af11580156109a0573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052506109c991908101906110f0565b8360400151838151811015156109db57fe5b90602001906020020181905250816001019150610641565b8260000151836020015184604001518292508191508090509850985098505050505050509193909250565b600080600080600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f23f63c960006040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610a9c91906114e3565b602060405180830381600087803b158015610ab657600080fd5b505af1158015610aca573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610aee919081019061105d565b92508273ffffffffffffffffffffffffffffffffffffffff166313db93466040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015610b5457600080fd5b505af1158015610b68573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610b8c9190810190611034565b91508173ffffffffffffffffffffffffffffffffffffffff1663e942b5","16886040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610be391906115cf565b600060405180830381600087803b158015610bfd57600080fd5b505af1158015610c11573d6000803e3d6000fd5b505050508173ffffffffffffffffffffffffffffffffffffffff1663e942b516876040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610c6a919061157a565b600060405180830381600087803b158015610c8457600080fd5b505af1158015610c98573d6000803e3d6000fd5b505050508173ffffffffffffffffffffffffffffffffffffffff1663e942b516866040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610cf19190611525565b600060405180830381600087803b158015610d0b57600080fd5b505af1158015610d1f573d6000803e3d6000fd5b505050508273ffffffffffffffffffffffffffffffffffffffff166331afac3688846040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610d7a9291906114b3565b602060405180830381600087803b158015610d9457600080fd5b505af1158015610da8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610dcc9190810190611086565b90507fc57b01fa77f41df77eaab79a0e2623fab2e7ae3e9530d9b1cab225ad65f2b7ce81604051610dfd9190611446565b60405180910390a18093505050509392505050565b60008054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610ea85780601f10610e7d57610100808354040283529160200191610ea8565b820191906000526020600020905b815481529060010190602001808311610e8b57829003601f168201915b505050505081565b6060604051908101604052806060815260200160608152602001606081525090565b6000610ede82516116d4565b905092915050565b6000610ef282516116e6565b905092915050565b6000610f0682516116f8565b905092915050565b6000610f1a825161170a565b905092915050565b6000610f2e825161171c565b905092915050565b600082601f8301121515610f4957600080fd5b8135610f5c610f5782611631565b611604565b91508082526020830160208301858383011115610f7857600080fd5b610f8383828461174a565b50505092915050565b600082601f8301121515610f9f57600080fd5b8151610fb2610fad82611631565b611604565b91508082526020830160208301858383011115610fce57600080fd5b610fd9838284611759565b50505092915050565b600060208284031215610ff457600080fd5b600061100284828501610ed2565b91505092915050565b60006020828403121561101d57600080fd5b600061102b84828501610ee6565b91505092915050565b60006020828403121561104657600080fd5b600061105484828501610efa565b91505092915050565b60006020828403121561106f57600080fd5b600061107d84828501610f0e565b91505092915050565b60006020828403121561109857600080fd5b60006110a684828501610f22565b91505092915050565b6000602082840312156110c157600080fd5b600082013567ffffffffffffffff8111156110db57600080fd5b6110e784828501610f36565b91505092915050565b60006020828403121561110257600080fd5b600082015167ffffffffffffffff81111561111c57600080fd5b61112884828501610f8c565b91505092915050565b60008060006060848603121561114657600080fd5b600084013567ffffffffffffffff81111561116057600080fd5b61116c86828701610f36565b935050602084013567ffffffffffffffff81111561118957600080fd5b61119586828701610f36565b925050604084013567ffffffffffffffff8111156111b257600080fd5b6111be86828701610f36565b9150509250925092565b60006111d38261167c565b808452602084019350836020820285016111ec8561165d565b60005b84811015611225578383038852611207838351611299565b92506112128261169d565b91506020880197506001810190506111ef565b508196508694505050505092915050565b61123f81611726565b82525050565b61124e81611738565b82525050565b61125d816116ca565b82525050565b600061126e82611692565b808452611282816020860160208601611759565b61128b8161178c565b602085010191505092915050565b60006112a482611687565b8084526112b8816020860160208601611759565b6112c18161178c565b602085010191505092915050565b6000815460018116600081146112ec576001811461130c5761134d565b607f600283041680865260ff19831660208701526040860193505061134d565b600282048086526020860195506113228561166a565b60005b8281101561134457815481890152600182019150602081019050611325565b80880195505050505b505092915050565b6000600b82527f63686172676550686f6e650000000000000000000000000000000000000000006020830152604082019050919050565b6000600a82527f6368617267654e616d65000000000000000000000000000000000000000000006020830152604082019050919050565b6000600282527f69640000000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000606082019050818103600083015261141481866111c8565b9050818103602083015261142881856111c8565b9050818103604083015261143c81846111c8565b9050949350505050565b600060208201905061145b6000830184611254565b92915050565b6000602082019050818103600083015261147b8184611299565b905092915050565b6000604082019050818103600083015261149d8185611263565b90506114ac6020830184611236565b9392505050565b600060408201905081810360008301526114cd8185611263565b90506114dc6020830184611245565b9392505050565b600060208201905081810360008301526114fd81846112cf565b905092915050565b6000602082019050818103600083015261151e81611355565b9050919050565b6000604082019050818103600083015261153e81611355565b905081810360208301526115528184611263565b905092915050565b600060208201905081810360008301526115738161138c565b9050919050565b600060408201905081810360008301526115938161138c565b905081810360208301526115a78184611263565b905092915050565b600060208201905081810360008301526115c8816113c3565b9050919050565b600060408201905081810360008301526115e8816113c3565b905081810360208301526115fc8184611263565b905092915050565b6000604051905081810181811067ffffffffffffffff8211171561162757600080fd5b8060405250919050565b600067ffffffffffffffff82111561164857600080fd5b601f19601f8301169050602081019050919050565b6000602082019050919050565b60008160005260206000209050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006116df826116aa565b9050919050565b60006116f1826116aa565b9050919050565b6000611703826116aa565b9050919050565b6000611715826116aa565b9050919050565b6000819050919050565b6000611731826116aa565b9050919050565b6000611743826116aa565b9050919050565b82818337600083830152505050565b60005b8381101561177757808201518184015260208101905061175c565b83811115611786576000848401525b50505050565b6000601f19601f83011690509190505600a265627a7a723058204e2f456b12aa6ab1d08ea18443e804d34634e80f82296aef52424927a5056e896c6578706572696d656e74616cf50037"};

    public static final String BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", BINARY_ARRAY);

    public static final String[] SM_BINARY_ARRAY = {};

    public static final String SM_BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", SM_BINARY_ARRAY);

    public static final String[] ABI_ARRAY = {"[{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"string\"}],\"name\":\"selectById\",\"outputs\":[{\"name\":\"\",\"type\":\"string[]\"},{\"name\":\"\",\"type\":\"string[]\"},{\"name\":\"\",\"type\":\"string[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"string\"},{\"name\":\"_chargeName\",\"type\":\"string\"},{\"name\":\"_chargePhone\",\"type\":\"string\"}],\"name\":\"insert\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"table_name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"count\",\"type\":\"int256\"}],\"name\":\"CreateResult\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"count\",\"type\":\"int256\"}],\"name\":\"InsertResult\",\"type\":\"event\"}]"};

    public static final String ABI = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", ABI_ARRAY);

    public static final String FUNC_SELECTBYID = "selectById";

    public static final String FUNC_INSERT = "insert";

    public static final String FUNC_TABLE_NAME = "table_name";

    public static final Event CREATERESULT_EVENT = new Event("CreateResult", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
    ;

    public static final Event INSERTRESULT_EVENT = new Event("InsertResult", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
    ;

    protected ChargeInfo(String contractAddress, Client client, CryptoKeyPair credential) {
        super(getBinary(client.getCryptoSuite()), contractAddress, client, credential);
    }

    public static String getBinary(CryptoSuite cryptoSuite) {
        return (cryptoSuite.getCryptoTypeConfig() == CryptoType.ECDSA_TYPE ? BINARY : SM_BINARY);
    }

    public Tuple3<List<String>, List<String>, List<String>> selectById(String _id) throws ContractException {
        final Function function = new Function(FUNC_SELECTBYID, 
                Arrays.<Type>asList(new Utf8String(_id)),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Utf8String>>() {}, new TypeReference<DynamicArray<Utf8String>>() {}, new TypeReference<DynamicArray<Utf8String>>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple3<List<String>, List<String>, List<String>>(
                convertToNative((List<Utf8String>) results.get(0).getValue()), 
                convertToNative((List<Utf8String>) results.get(1).getValue()), 
                convertToNative((List<Utf8String>) results.get(2).getValue()));
    }

    public TransactionReceipt insert(String _id, String _chargeName, String _chargePhone) {
        final Function function = new Function(
                FUNC_INSERT, 
                Arrays.<Type>asList(new Utf8String(_id),
                new Utf8String(_chargeName),
                new Utf8String(_chargePhone)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void insert(String _id, String _chargeName, String _chargePhone, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_INSERT, 
                Arrays.<Type>asList(new Utf8String(_id),
                new Utf8String(_chargeName),
                new Utf8String(_chargePhone)),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForInsert(String _id, String _chargeName, String _chargePhone) {
        final Function function = new Function(
                FUNC_INSERT, 
                Arrays.<Type>asList(new Utf8String(_id),
                new Utf8String(_chargeName),
                new Utf8String(_chargePhone)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<String, String, String> getInsertInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_INSERT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<String, String, String>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (String) results.get(2).getValue()
                );
    }

    public Tuple1<BigInteger> getInsertOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_INSERT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public String table_name() throws ContractException {
        final Function function = new Function(FUNC_TABLE_NAME, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public List<CreateResultEventResponse> getCreateResultEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(CREATERESULT_EVENT, transactionReceipt);
        ArrayList<CreateResultEventResponse> responses = new ArrayList<CreateResultEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            CreateResultEventResponse typedResponse = new CreateResultEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.count = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeCreateResultEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(CREATERESULT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeCreateResultEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(CREATERESULT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<InsertResultEventResponse> getInsertResultEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(INSERTRESULT_EVENT, transactionReceipt);
        ArrayList<InsertResultEventResponse> responses = new ArrayList<InsertResultEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            InsertResultEventResponse typedResponse = new InsertResultEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.count = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeInsertResultEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(INSERTRESULT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeInsertResultEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(INSERTRESULT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public static ChargeInfo load(String contractAddress, Client client, CryptoKeyPair credential) {
        return new ChargeInfo(contractAddress, client, credential);
    }

    public static ChargeInfo deploy(Client client, CryptoKeyPair credential) throws ContractException {
        return deploy(ChargeInfo.class, client, credential, getBinary(client.getCryptoSuite()), "");
    }

    public static class CreateResultEventResponse {
        public TransactionReceipt.Logs log;

        public BigInteger count;
    }

    public static class InsertResultEventResponse {
        public TransactionReceipt.Logs log;

        public BigInteger count;
    }
}
