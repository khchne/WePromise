package org.example.daochu.raw;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.fisco.bcos.sdk.abi.FunctionReturnDecoder;
import org.fisco.bcos.sdk.abi.TypeReference;
import org.fisco.bcos.sdk.abi.datatypes.DynamicArray;
import org.fisco.bcos.sdk.abi.datatypes.Event;
import org.fisco.bcos.sdk.abi.datatypes.Function;
import org.fisco.bcos.sdk.abi.datatypes.Type;
import org.fisco.bcos.sdk.abi.datatypes.Utf8String;
import org.fisco.bcos.sdk.abi.datatypes.generated.Int256;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple1;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple5;
import org.fisco.bcos.sdk.client.Client;
import org.fisco.bcos.sdk.contract.Contract;
import org.fisco.bcos.sdk.crypto.CryptoSuite;
import org.fisco.bcos.sdk.crypto.keypair.CryptoKeyPair;
import org.fisco.bcos.sdk.eventsub.EventCallback;
import org.fisco.bcos.sdk.model.CryptoType;
import org.fisco.bcos.sdk.model.TransactionReceipt;
import org.fisco.bcos.sdk.model.callback.TransactionCallback;
import org.fisco.bcos.sdk.transaction.model.exception.ContractException;

@SuppressWarnings("unchecked")
public class HandicapCerts extends Contract {
    public static final String[] BINARY_ARRAY = {"","","80fd5b505af1158015611b4c573d6000803e3d6000fd5b505050508273ffffffffffffffffffffffffffffffffffffffff1663bf2b70a16001848673ffffffffffffffffffffffffffffffffffffffff16637857d7c96040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015611bd357600080fd5b505af1158015611be7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611c0b9190810190612a98565b6040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401611c459392919061310d565b602060405180830381600087803b158015611c5f57600080fd5b505af1158015611c73573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611c979190810190612b3c565b90507f8e5890af40fc24a059396aca2f83d6ce41fcef086876548fa4fb8ec27e9d292a81604051611cc8919061304e565b60405180910390a180935050505095945050505050565b60608060608060606000806000611cf4612944565b600080600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f23f63c960006040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401611d6f919061308b565b602060405180830381600087803b158015611d8957600080fd5b505af1158015611d9d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611dc19190810190612b13565b95508573ffffffffffffffffffffffffffffffffffffffff16637857d7c96040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015611e2757600080fd5b505af1158015611e3b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611e5f9190810190612a98565b94508473ffffffffffffffffffffffffffffffffffffffff1663cd30a1d18d6040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401611eb69190613243565b600060405180830381600087803b158015611ed057600080fd5b505af1158015611ee4573d6000803e3d6000fd5b505050508573ffffffffffffffffffffffffffffffffffffffff1663e8434e396001876040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401611f409291906130ad565b602060405180830381600087803b158015611f5a57600080fd5b505af1158015611f6e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611f929190810190612ac1565b93508373ffffffffffffffffffffffffffffffffffffffff1663949d225d6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015611ff857600080fd5b505af115801561200c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506120309190810190612b3c565b60405190808252806020026020018201604052801561206357816020015b606081526020019060019003908161204e5790505b5083600001819052508373ffffffffffffffffffffffffffffffffffffffff1663949d225d6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156120d057600080fd5b505af11580156120e4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506121089190810190612b3c565b60405190808252806020026020018201604052801561213b57816020015b60608152602001906001900390816121265790505b5083602001819052508373ffffffffffffffffffffffffffffffffffffffff1663949d225d6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156121a857600080fd5b505af11580156121bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506121e09190810190612b3c565b60405190808252806020026020018201604052801561221357816020015b60608152602001906001900390816121fe5790505b5083604001819052508373ffffffffffffffffffffffffffffffffffffffff1663949d225d6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561228057600080fd5b505af1158015612294573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506122b89190810190612b3c565b6040519080825280602002602001820160405280156122e65781602001602082028038833980820191505090505b5083606001819052508373ffffffffffffffffffffffffffffffffffffffff1663949d225d6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561235357600080fd5b505af1158015612367573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061238b9190810190612b3c565b6040519080825280602002602001820160405280156123b95781602001602082028038833980820191505090505b508360800181905250600091505b8373ffffffffffffffffffffffffffffffffffffffff1663949d225d6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561242b57600080fd5b505af115801561243f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506124639190810190612b3c565b821215612903578373ffffffffffffffffffffffffffffffffffffffff1663846719e0836040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016124bf919061304e565b602060405180830381600087803b1580156124d957600080fd5b505af11580156124ed573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506125119190810190612aea565b90508073ffffffffffffffffffffffffffffffffffffffff16639c981fcb6040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161256690613223565b600060405180830381600087803b15801561258057600080fd5b505af1158015612594573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052506125bd9190810190612ba6565b8360000151838151811015156125cf57fe5b906020019060200201819052508073ffffffffffffffffffffffffffffffffffffffff16639c981fcb6040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161262f9061314b565b600060405180830381600087803b15801561264957600080fd5b505af115801561265d573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052506126869190810190612ba6565b83602001518381518110151561269857fe5b906020019060200201819052508073ffffffffffffffffffffffffffffffffffffffff16639c981fcb6040518163ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016126f8906132c6565b600060405180830381600087803b15801561271257600080fd5b505af1158015612726573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525061274f9190810190612ba6565b83604001518381518110151561276157fe5b906020019060200201819052508073ffffffffffffffffffffffffffffffffffffffff1663fda69fae6040518163ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016127c190613278565b602060405180830381600087803b1580156127db57600080fd5b505af11580156127ef573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506128139190810190612b3c565b83606001518381518110151561282557fe5b90602001906020020181815250508073ffffffffffffffffffffffffffffffffffffffff1663fda69fae6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401612886906131a0565b602060405180830381600087803b1580156128a057600080fd5b505af11580156128b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506128d89190810190612b3c565b8360800151838151811015156128ea57fe5b90602001906020020181815250508160010191506123c7565b826000015183602001518460400151856060015186608001518494508393508292508191508090509a509a509a509a509a5050505050505091939590929450565b60a06040519081016040528060608152602001606081526020016060815260200160608152602001606081525090565b60006129808251613410565b905092915050565b60006129948251613422565b905092915050565b60006129a88251613434565b905092915050565b60006129bc8251613446565b905092915050565b60006129d08235613458565b905092915050565b60006129e48251613458565b905092915050565b600082601f83011215156129ff57600080fd5b8135612a12612a0d82613348565b61331b565b91508082526020830160208301858383011115612a2e57600080fd5b612a39838284613486565b50505092915050565b600082601f8301121515612a5557600080fd5b8151612a68612a6382613348565b61331b565b91508082526020830160208301858383011115612a8457600080fd5b612a8f838284613495565b50505092915050565b600060208284031215612aaa57600080fd5b6000612ab884828501612974565b91505092915050565b600060208284031215612ad357600080fd5b6000612ae184828501612988565b91505092915050565b600060208284031215612afc57600080fd5b6000612b0a8482850161299c565b91505092915050565b600060208284031215612b2557600080fd5b6000612b33848285016129b0565b9150","5092915050565b600060208284031215612b4e57600080fd5b6000612b5c848285016129d8565b91505092915050565b600060208284031215612b7757600080fd5b600082013567ffffffffffffffff811115612b9157600080fd5b612b9d848285016129ec565b91505092915050565b600060208284031215612bb857600080fd5b600082015167ffffffffffffffff811115612bd257600080fd5b612bde84828501612a42565b91505092915050565b600080600080600060a08688031215612bff57600080fd5b600086013567ffffffffffffffff811115612c1957600080fd5b612c25888289016129ec565b955050602086013567ffffffffffffffff811115612c4257600080fd5b612c4e888289016129ec565b945050604086013567ffffffffffffffff811115612c6b57600080fd5b612c77888289016129ec565b9350506060612c88888289016129c4565b9250506080612c99888289016129c4565b9150509295509295909350565b6000612cb1826133a0565b808452602084019350612cc383613374565b60005b82811015612cf557612cd9868351612d8d565b612ce2826133cc565b9150602086019550600181019050612cc6565b50849250505092915050565b6000612d0c826133ab565b80845260208401935083602082028501612d2585613381565b60005b84811015612d5e578383038852612d40838351612dd2565b9250612d4b826133d9565b9150602088019750600181019050612d28565b508196508694505050505092915050565b612d7881613462565b82525050565b612d8781613474565b82525050565b612d9681613406565b82525050565b6000612da7826133c1565b808452612dbb816020860160208601613495565b612dc4816134c8565b602085010191505092915050565b6000612ddd826133b6565b808452612df1816020860160208601613495565b612dfa816134c8565b602085010191505092915050565b600081546001811660008114612e255760018114612e4557612e86565b607f600283041680865260ff198316602087015260408601935050612e86565b60028204808652602086019550612e5b8561338e565b60005b82811015612e7d57815481890152600182019150602081019050612e5e565b80880195505050505b505092915050565b6000600482527f6e616d65000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000600682527f684c6576656c00000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000600482527f736f7274000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000600282527f69640000000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000600982527f6843617465676f727900000000000000000000000000000000000000000000006020830152604082019050919050565b6000600682527f63657274496400000000000000000000000000000000000000000000000000006020830152604082019050919050565b600060a0820190508181036000830152612ff28188612d01565b905081810360208301526130068187612d01565b9050818103604083015261301a8186612d01565b9050818103606083015261302e8185612ca6565b905081810360808301526130428184612ca6565b90509695505050505050565b60006020820190506130636000830184612d8d565b92915050565b600060208201905081810360008301526130838184612dd2565b905092915050565b600060208201905081810360008301526130a58184612e08565b905092915050565b600060408201905081810360008301526130c78185612e08565b90506130d66020830184612d6f565b9392505050565b600060408201905081810360008301526130f78185612e08565b90506131066020830184612d7e565b9392505050565b600060608201905081810360008301526131278186612e08565b90506131366020830185612d7e565b6131436040830184612d6f565b949350505050565b6000602082019050818103600083015261316481612e8e565b9050919050565b6000604082019050818103600083015261318481612e8e565b905081810360208301526131988184612d9c565b905092915050565b600060208201905081810360008301526131b981612ec5565b9050919050565b600060408201905081810360008301526131d981612ec5565b90506131e86020830184612d8d565b92915050565b6000604082019050818103600083015261320781612efc565b9050818103602083015261321b8184612e08565b905092915050565b6000602082019050818103600083015261323c81612f33565b9050919050565b6000604082019050818103600083015261325c81612f33565b905081810360208301526132708184612d9c565b905092915050565b6000602082019050818103600083015261329181612f6a565b9050919050565b600060408201905081810360008301526132b181612f6a565b90506132c06020830184612d8d565b92915050565b600060208201905081810360008301526132df81612fa1565b9050919050565b600060408201905081810360008301526132ff81612fa1565b905081810360208301526133138184612d9c565b905092915050565b6000604051905081810181811067ffffffffffffffff8211171561333e57600080fd5b8060405250919050565b600067ffffffffffffffff82111561335f57600080fd5b601f19601f8301169050602081019050919050565b6000602082019050919050565b6000602082019050919050565b60008160005260206000209050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600061341b826133e6565b9050919050565b600061342d826133e6565b9050919050565b600061343f826133e6565b9050919050565b6000613451826133e6565b9050919050565b6000819050919050565b600061346d826133e6565b9050919050565b600061347f826133e6565b9050919050565b82818337600083830152505050565b60005b838110156134b3578082015181840152602081019050613498565b838111156134c2576000848401525b50505050565b6000601f19601f83011690509190505600a265627a7a72305820f2143d4d206ac3a30b054884d35b76f3f6eeabac796aa627d6b4407c28e44fac6c6578706572696d656e74616cf50037"};

    public static final String BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", BINARY_ARRAY);

    public static final String[] SM_BINARY_ARRAY = {};

    public static final String SM_BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", SM_BINARY_ARRAY);

    public static final String[] ABI_ARRAY = {"[{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"string\"},{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_certId\",\"type\":\"string\"},{\"name\":\"_hCategory\",\"type\":\"int256\"},{\"name\":\"_hLevel\",\"type\":\"int256\"}],\"name\":\"insertCert\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"string\"}],\"name\":\"removeCert\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"selectAll\",\"outputs\":[{\"name\":\"\",\"type\":\"string[]\"},{\"name\":\"\",\"type\":\"string[]\"},{\"name\":\"\",\"type\":\"string[]\"},{\"name\":\"\",\"type\":\"int256[]\"},{\"name\":\"\",\"type\":\"int256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"table_name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"string\"},{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_certId\",\"type\":\"string\"},{\"name\":\"_hCategory\",\"type\":\"int256\"},{\"name\":\"_hLevel\",\"type\":\"int256\"}],\"name\":\"updateCert\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"string\"}],\"name\":\"selectByid\",\"outputs\":[{\"name\":\"\",\"type\":\"string[]\"},{\"name\":\"\",\"type\":\"string[]\"},{\"name\":\"\",\"type\":\"string[]\"},{\"name\":\"\",\"type\":\"int256[]\"},{\"name\":\"\",\"type\":\"int256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"count\",\"type\":\"int256\"}],\"name\":\"CreateResult\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"count\",\"type\":\"int256\"}],\"name\":\"InsertResult\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"count\",\"type\":\"int256\"}],\"name\":\"UpdateResult\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"count\",\"type\":\"int256\"}],\"name\":\"RemoveResult\",\"type\":\"event\"}]"};

    public static final String ABI = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", ABI_ARRAY);

    public static final String FUNC_INSERTCERT = "insertCert";

    public static final String FUNC_REMOVECERT = "removeCert";

    public static final String FUNC_SELECTALL = "selectAll";

    public static final String FUNC_TABLE_NAME = "table_name";

    public static final String FUNC_UPDATECERT = "updateCert";

    public static final String FUNC_SELECTBYID = "selectByid";

    public static final Event CREATERESULT_EVENT = new Event("CreateResult", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
    ;

    public static final Event INSERTRESULT_EVENT = new Event("InsertResult", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
    ;

    public static final Event UPDATERESULT_EVENT = new Event("UpdateResult", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
    ;

    public static final Event REMOVERESULT_EVENT = new Event("RemoveResult", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
    ;

    protected HandicapCerts(String contractAddress, Client client, CryptoKeyPair credential) {
        super(getBinary(client.getCryptoSuite()), contractAddress, client, credential);
    }

    public static String getBinary(CryptoSuite cryptoSuite) {
        return (cryptoSuite.getCryptoTypeConfig() == CryptoType.ECDSA_TYPE ? BINARY : SM_BINARY);
    }

    public TransactionReceipt insertCert(String _id, String _name, String _certId, BigInteger _hCategory, BigInteger _hLevel) {
        final Function function = new Function(
                FUNC_INSERTCERT, 
                Arrays.<Type>asList(new Utf8String(_id),
                new Utf8String(_name),
                new Utf8String(_certId),
                new Int256(_hCategory),
                new Int256(_hLevel)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void insertCert(String _id, String _name, String _certId, BigInteger _hCategory, BigInteger _hLevel, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_INSERTCERT, 
                Arrays.<Type>asList(new Utf8String(_id),
                new Utf8String(_name),
                new Utf8String(_certId),
                new Int256(_hCategory),
                new Int256(_hLevel)),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForInsertCert(String _id, String _name, String _certId, BigInteger _hCategory, BigInteger _hLevel) {
        final Function function = new Function(
                FUNC_INSERTCERT, 
                Arrays.<Type>asList(new Utf8String(_id),
                new Utf8String(_name),
                new Utf8String(_certId),
                new Int256(_hCategory),
                new Int256(_hLevel)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple5<String, String, String, BigInteger, BigInteger> getInsertCertInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_INSERTCERT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Int256>() {}, new TypeReference<Int256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple5<String, String, String, BigInteger, BigInteger>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (String) results.get(2).getValue(), 
                (BigInteger) results.get(3).getValue(), 
                (BigInteger) results.get(4).getValue()
                );
    }

    public Tuple1<BigInteger> getInsertCertOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_INSERTCERT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public TransactionReceipt removeCert(String _id) {
        final Function function = new Function(
                FUNC_REMOVECERT, 
                Arrays.<Type>asList(new Utf8String(_id)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void removeCert(String _id, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_REMOVECERT, 
                Arrays.<Type>asList(new Utf8String(_id)),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForRemoveCert(String _id) {
        final Function function = new Function(
                FUNC_REMOVECERT, 
                Arrays.<Type>asList(new Utf8String(_id)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getRemoveCertInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_REMOVECERT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public Tuple1<BigInteger> getRemoveCertOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_REMOVECERT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public Tuple5<List<String>, List<String>, List<String>, List<BigInteger>, List<BigInteger>> selectAll() throws ContractException {
        final Function function = new Function(FUNC_SELECTALL, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Utf8String>>() {}, new TypeReference<DynamicArray<Utf8String>>() {}, new TypeReference<DynamicArray<Utf8String>>() {}, new TypeReference<DynamicArray<Int256>>() {}, new TypeReference<DynamicArray<Int256>>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple5<List<String>, List<String>, List<String>, List<BigInteger>, List<BigInteger>>(
                convertToNative((List<Utf8String>) results.get(0).getValue()), 
                convertToNative((List<Utf8String>) results.get(1).getValue()), 
                convertToNative((List<Utf8String>) results.get(2).getValue()), 
                convertToNative((List<Int256>) results.get(3).getValue()), 
                convertToNative((List<Int256>) results.get(4).getValue()));
    }

    public String table_name() throws ContractException {
        final Function function = new Function(FUNC_TABLE_NAME, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public TransactionReceipt updateCert(String _id, String _name, String _certId, BigInteger _hCategory, BigInteger _hLevel) {
        final Function function = new Function(
                FUNC_UPDATECERT, 
                Arrays.<Type>asList(new Utf8String(_id),
                new Utf8String(_name),
                new Utf8String(_certId),
                new Int256(_hCategory),
                new Int256(_hLevel)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void updateCert(String _id, String _name, String _certId, BigInteger _hCategory, BigInteger _hLevel, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_UPDATECERT, 
                Arrays.<Type>asList(new Utf8String(_id),
                new Utf8String(_name),
                new Utf8String(_certId),
                new Int256(_hCategory),
                new Int256(_hLevel)),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForUpdateCert(String _id, String _name, String _certId, BigInteger _hCategory, BigInteger _hLevel) {
        final Function function = new Function(
                FUNC_UPDATECERT, 
                Arrays.<Type>asList(new Utf8String(_id),
                new Utf8String(_name),
                new Utf8String(_certId),
                new Int256(_hCategory),
                new Int256(_hLevel)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple5<String, String, String, BigInteger, BigInteger> getUpdateCertInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_UPDATECERT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Int256>() {}, new TypeReference<Int256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple5<String, String, String, BigInteger, BigInteger>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (String) results.get(2).getValue(), 
                (BigInteger) results.get(3).getValue(), 
                (BigInteger) results.get(4).getValue()
                );
    }

    public Tuple1<BigInteger> getUpdateCertOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_UPDATECERT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public Tuple5<List<String>, List<String>, List<String>, List<BigInteger>, List<BigInteger>> selectByid(String _id) throws ContractException {
        final Function function = new Function(FUNC_SELECTBYID, 
                Arrays.<Type>asList(new Utf8String(_id)),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Utf8String>>() {}, new TypeReference<DynamicArray<Utf8String>>() {}, new TypeReference<DynamicArray<Utf8String>>() {}, new TypeReference<DynamicArray<Int256>>() {}, new TypeReference<DynamicArray<Int256>>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple5<List<String>, List<String>, List<String>, List<BigInteger>, List<BigInteger>>(
                convertToNative((List<Utf8String>) results.get(0).getValue()), 
                convertToNative((List<Utf8String>) results.get(1).getValue()), 
                convertToNative((List<Utf8String>) results.get(2).getValue()), 
                convertToNative((List<Int256>) results.get(3).getValue()), 
                convertToNative((List<Int256>) results.get(4).getValue()));
    }

    public List<CreateResultEventResponse> getCreateResultEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(CREATERESULT_EVENT, transactionReceipt);
        ArrayList<CreateResultEventResponse> responses = new ArrayList<CreateResultEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            CreateResultEventResponse typedResponse = new CreateResultEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.count = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeCreateResultEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(CREATERESULT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeCreateResultEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(CREATERESULT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<InsertResultEventResponse> getInsertResultEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(INSERTRESULT_EVENT, transactionReceipt);
        ArrayList<InsertResultEventResponse> responses = new ArrayList<InsertResultEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            InsertResultEventResponse typedResponse = new InsertResultEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.count = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeInsertResultEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(INSERTRESULT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeInsertResultEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(INSERTRESULT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<UpdateResultEventResponse> getUpdateResultEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(UPDATERESULT_EVENT, transactionReceipt);
        ArrayList<UpdateResultEventResponse> responses = new ArrayList<UpdateResultEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            UpdateResultEventResponse typedResponse = new UpdateResultEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.count = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeUpdateResultEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(UPDATERESULT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeUpdateResultEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(UPDATERESULT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<RemoveResultEventResponse> getRemoveResultEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(REMOVERESULT_EVENT, transactionReceipt);
        ArrayList<RemoveResultEventResponse> responses = new ArrayList<RemoveResultEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            RemoveResultEventResponse typedResponse = new RemoveResultEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.count = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeRemoveResultEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(REMOVERESULT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeRemoveResultEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(REMOVERESULT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public static HandicapCerts load(String contractAddress, Client client, CryptoKeyPair credential) {
        return new HandicapCerts(contractAddress, client, credential);
    }

    public static HandicapCerts deploy(Client client, CryptoKeyPair credential) throws ContractException {
        return deploy(HandicapCerts.class, client, credential, getBinary(client.getCryptoSuite()), "");
    }

    public static class CreateResultEventResponse {
        public TransactionReceipt.Logs log;

        public BigInteger count;
    }

    public static class InsertResultEventResponse {
        public TransactionReceipt.Logs log;

        public BigInteger count;
    }

    public static class UpdateResultEventResponse {
        public TransactionReceipt.Logs log;

        public BigInteger count;
    }

    public static class RemoveResultEventResponse {
        public TransactionReceipt.Logs log;

        public BigInteger count;
    }
}
